import rodados.*
import extras.*
import dependencia.*
import pedidos.*

describe"test"{

	const depDeporte = new Dependencia(empleados=45)
	const depCultura = new Dependencia(empleados=31)
	const cachito = new Corsa(color="rojo")
	const corsa_1 = new Corsa(color="azul")
	const corsa_2 = new Corsa(color="verde")	
	const kwid_1 = new Kwid(tanque=true)
	const kwid_2 = new Kwid(tanque=true)
	const kwid_3 = new Kwid(tanque=true)
	const kwid_4 = new Kwid(tanque=false)
	const auto_1 = new Especial(capacidad=5 , velMaxima=160 , color="beige" , peso=1200)
	const viaje_1 = new Pedido (distRecorrer=960 ,tiempoMax=8, cantPasaj=4, colIncompatibles = #{"azul", "negro","rojo","verde","beige"})//vel 120
	const viaje_2 = new Pedido (distRecorrer=960 ,tiempoMax=8, cantPasaj=3, colIncompatibles = #{"negro"})
	const viaje_3 = new Pedido (distRecorrer=960 ,tiempoMax=8, cantPasaj=8, colIncompatibles = #{"azul", "negro"})
	const viaje_4 = new Pedido (distRecorrer=960 ,tiempoMax=6, cantPasaj=2, colIncompatibles = #{"azul", "negro"})
	
	method initialize(){
		trafic.interior(interiorPopular)
		trafic.motor(motorBataton)
		var listaDep = [cachito, corsa_1, corsa_2, kwid_1, auto_1]
		var listaCult = [cachito, kwid_2, kwid_3, kwid_4,trafic]
		depDeporte.agregarVarios(listaDep)
		depCultura.agregarVarios(listaCult)
		depDeporte.agregarPedido(viaje_1)
		depDeporte.agregarPedido(viaje_2)
		depCultura.agregarPedido(viaje_3)
		depCultura.agregarPedido(viaje_4)
		
	}
	
	test"Peso total de la flota"{
		assert.equals(6450, depDeporte.pesoTotalFlota())
		assert.equals(10700, depCultura.pesoTotalFlota())
	}
	test"Bien equipada"{
		assert.that(depDeporte.estaBienEquipada())
		assert.notThat(depCultura.estaBienEquipada())
	}
	test"Capacidad total en color azul"{
		assert.equals(7, depDeporte.capacidadTotalEnColor("azul"))
		assert.equals(10, depCultura.capacidadTotalEnColor("azul"))
	}	
	test"Color del rodado mas rapido"{
		assert.equals("beige", depDeporte.colorDeRodadoMasRapido())
		assert.equals("rojo", depCultura.colorDeRodadoMasRapido())
	}		
	test"La dependencia es grande"{
		assert.that(depDeporte.esGrande())
		assert.notThat(depCultura.esGrande())
	}
	test"Capacidad faltante"{
		assert.equals(25, depDeporte.capacidadFaltante())
		assert.equals(5, depCultura.capacidadFaltante())
	}	
	test"Cantidad de pasajeros total de los registros"{
		assert.equals(7,depDeporte.totalPasajeros())
		assert.equals(10,depCultura.totalPasajeros())
	}
	//test"Ninguno puede"{
	//	assert.equals([viaje_1],depDeporte.insatisfecho())
	//}
	test"Color incompatible"{
		assert.that(depDeporte.colorIncompatible("negro"))
	}
		test"Color incompatible falso"{
		assert.notThat(depDeporte.colorIncompatible("azul"))
	}
}